name: DevOps Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install -r requirements.txt

      - name: Run flake8 linting
        run: flake8 --max-line-length=120 .

  test:
    name: Run Tests with Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage
          pip install -r requirements.txt

      - name: Run tests with coverage
        run: |
          coverage run -m pytest tests/
          coverage report -m
          coverage html

      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install Bandit for security scanning
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      - name: Run Bandit security checks
        run: bandit -r . --severity-level medium --skip B104



  deploy:
      name: Deploy to Heroku
      runs-on: ubuntu-latest
      needs: test

      steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      - name: Login to Heroku Container Registry
        run: |
          echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username="${{ secrets.HEROKU_EMAIL }}" --password-stdin registry.heroku.com

      - name: Build Docker Image
        run: docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web .

      - name: Push to Heroku Container Registry
        run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

      - name: Release Heroku App
        run: |
          heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Check Deployment Health
        run: curl -I https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com



